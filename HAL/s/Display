;
; Copyright (c) 2012, RISC OS Open Ltd
; Copyright (c) 2012, Adrian Lees
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
; With many thanks to Broadcom Europe Ltd for releasing the source code to
; its Linux drivers, thus making this port possible.
;
;-------------------------------------------------------------------------------------
;
;       Display driver routines
;
;-------------------------------------------------------------------------------------

                AREA    |ARM$$code|, CODE, READONLY, PIC

                GET     Hdr:ListOpts
                GET     hdr.BCM2835

        [ HALDebug

                GET     hdr.StaticWS

                EXPORT  clear_block
                EXPORT  copy_block_down
                EXPORT  copy_block_up
                EXPORT  copy_line_left
                EXPORT  copy_line_right
;               EXPORT  exchange_colours
                EXPORT  output_char
                EXPORT  output_char_at
                EXPORT  output_hex8
                EXPORT  output_move
                EXPORT  output_newline
                EXPORT  output_ntext
                EXPORT  output_ntext_at
                EXPORT  output_regs
                EXPORT  output_text
                EXPORT  output_text_at
                EXPORT  set_text_colours

;-------------------------------------------------------------------------------------
;
;       Block copying and clearing
;
;-------------------------------------------------------------------------------------
;
; Copy block down by a given number of lines
;
; entry R0 = x min
;       R1 = y min
;       R2 = width (in columns)
;       R3 = number of rows to be copied
;       R4 = vertical displacement (in rows)

copy_block_down STMFD   R13!,{R0-R12,R14}
                ADD     R1,R1,R3
                MOV     R7,#1
                ADD     R1,R1,#1
                B       copy_block

; Copy block up by a given number of lines
;
; entry R0 = x min
;       R1 = y min
;       R2 = width (in columns)
;       R3 = number of rows to be copied
;       R4 = vertical displacement (in rows)

copy_block_up   STMFD   R13!,{R0-R12,R14}
                MOV     R7,#0
copy_block      LDR     R5,BytesPerRow
                LDR     R14,ScreenBase
                LDR     R8,BytesPerChar
                MLA     R14,R1,R5,R14
                MUL     R2,R8,R2        ;line width (bytes)
                MLA     R1,R8,R0,R14    ;address of top left
                RSB     R6,R2,R5,LSR #3 ;offset from end of line to start of next
                MOV     R3,R3,LSL #3

                ;R1 = address of top-left byte
                ;R2 = line width (bytes)
                ;R3 = number of lines
                ;R4 = vertical displacement
                ;R5 = BytesPerRow
                ;R6 = inter-line offset
                ;R7 = 0 up, 1 down
                ;R8 = BytesPerChar (=BitsPerPixel)

                TEQ     R7,#0
                SUBNE   R1,R1,R5
                SUBNE   R1,R1,R5,LSR #3
                RSBNE   R5,R5,#0
                RSBNE   R6,R2,R5,ASR #3
                MUL     R5,R4,R5
                SUB     R0,R1,R5

copy_y_lp       TST     R0,#3           ;Note: R0,R1 have same alignment
                MOV     R14,R2          ; (because scanline length = 4n)
                BNE     copy_head_lp
copy_x_32lp     SUBS    R14,R14,#32
                LDMGEIA R1!,{R4,R5,R7-R12}
                STMGEIA R0!,{R4,R5,R7-R12}
                BGT     copy_x_32lp
                ADDLT   R14,R14,#32
copy_x_8lp      SUBS    R14,R14,#8
                LDMGEIA R1!,{R4,R5}
                STMGEIA R0!,{R4,R5}
                BGT     copy_x_8lp
                ADDLT   R14,R14,#8
copy_x_4lp      SUBS    R14,R14,#4
                LDRGE   R4,[R1],#4
                STRGE   R4,[R0],#4
                BGT     copy_x_4lp
                BLT     copy_tail
copy_next       ADD     R0,R0,R6
                ADD     R1,R1,R6
                SUBS    R3,R3,#1
                BGT     copy_y_lp
                LDMFD   R13!,{R0-R12,PC}

copy_head_lp    LDRB    R4,[R1],#1
                SUBS    R14,R14,#1
                STRB    R4,[R0],#1
                TSTNE   R1,#3
                BNE     copy_head_lp
                CMP     R14,#0
                BNE     copy_x_32lp
                B       copy_next

copy_tail       ADD     R14,R14,#4
                LDRB    R4,[R1],#1
copy_x_1lp      SUBS    R14,R14,#1
                STRB    R4,[R0],#1
                LDRGTB  R4,[R1],#1
                BGT     copy_x_1lp
                ADD     R0,R0,R6        ;next line
                ADD     R1,R1,R6
                SUBS    R3,R3,#1
                BGT     copy_y_lp
                LDMFD   R13!,{R0-R12,PC}


; Copy a single line a given number of characters to the right
;
; entry R0 = x min
;       R1 = y
;       R2 = line length
;       R3 = distance

copy_line_right STMFD   R13!,{R0,R2-R8,R14}
                MOVS    R4,#-1
                B       copy_line

; Copy a single line a given number of characters to the left
;  (this routine is not optimised for performance)
;
; entry R0 = x min
;       R1 = y
;       R2 = line length
;       R3 = distance

copy_line_left  STMFD   R13!,{R0,R2-R8,R14}
                RSB     R3,R3,#0
                MOVS    R4,#1
copy_line       LDR     R5,BytesPerRow
                LDR     R14,ScreenBase
                LDR     R8,BytesPerChar
                MLA     R14,R1,R5,R14
                ADDMI   R0,R0,R2        ;copying right (start at top right)
                MUL     R2,R8,R2        ;line width (bytes)
                MLA     R0,R8,R0,R14    ;address of top left/right
                RSBPL   R6,R2,R5,LSR #3 ;offset from end of line to start of next
                ADDMI   R6,R2,R5,LSR #3
                MULS    R3,R8,R3        ;address inc
                LDMEQFD R13!,{R0,R2-R8,PC}

                ;R2 = line length (bytes)
                ;R3 = address offset from old to new position
                ;R4 = +1 for right, -1 for left
                ;R6 = address offset between scanlines

                TST     R3,#3
                TSTEQ   R0,#3
                TSTEQ   R2,#3
                MOVEQ   R4,R4,LSL #2    ;can transfer words rather than bytes
                SUB     R3,R3,R4        ;compensate for postindexing
                MOV     R8,#8
                BNE     cpline_low      ;not word-aligned at old and/or new

                CMP     R4,#0
                SUBMI   R0,R0,#4
cpline_lp2      MOV     R14,R2
cpline_lp       LDR     R5,[R0],R4
                SUBS    R14,R14,#4
                STRGE   R5,[R0,R3]
                BGT     cpline_lp
                SUBS    R8,R8,#1
                ADD     R0,R0,R6
                BGT     cpline_lp2
                LDMFD   R13!,{R0,R2-R8,PC}

cpline_low      CMP     R4,#0
                SUBMI   R0,R0,#1
cpline_lowlp2   MOV     R14,R2
cpline_lowlp    LDRB    R5,[R0],R4
                SUBS    R14,R14,#1
                STRGEB  R5,[R0,R3]
                BGT     cpline_lowlp
                SUBS    R8,R8,#1
                ADD     R0,R0,R6
                BGT     cpline_lowlp2
                LDMFD   R13!,{R0,R2-R8,PC}


; Clear a block to the background colour
;
; entry R0 = x min (top left; inclusive)
;       R1 = y min
;       R2 = x max (bottom right; exclusive)
;       R3 = y max

clear_block     STMFD   R13!,{R0-R11,R14}
                SUBS    R2,R2,R0
                SUBNES  R3,R3,R1
                LDMEQFD R13!,{R0-R11,PC} ;nowt to be done

                LDR     R4,BTextPixRepl ;replicated background pixel
                LDR     R5,BytesPerRow

                LDR     R14,ScreenBase
                LDR     R8,BytesPerChar
                MLA     R14,R1,R5,R14
                MUL     R2,R8,R2        ;line width (bytes)
                MLA     R0,R8,R0,R14    ;address of top left
                RSB     R6,R2,R5,LSR #3 ;offset from end of line to start of next
                MOV     R3,R3,LSL #3

                ;R0 = address of top-left byte
                ;R2 = line width (bytes)
                ;R3 = number of scanlines
                ;R6 = inter-line offset
                ;R4 = pixel value (replicated throughout word)
                ;R8 = BytesPerChar (=BitsPerPixel)

                MOV     R1,R4
                MOV     R5,R4
                MOV     R7,R4
                MOV     R8,R4
                MOV     R10,R4
                MOV     R11,R4
                MOV     R12,R4

clear_y_lp      TST     R0,#3
                MOV     R14,R2
                BNE     clear_head_lp
clear_x_64lp    SUBS    R14,R14,#64
                STMGEIA R0!,{R1,R4,R5,R7,R8,R10-R12}
                STMGEIA R0!,{R1,R4,R5,R7,R8,R10-R12}
                BGT     clear_x_64lp
                ADDLT   R14,R14,#64
clear_x_8lp     SUBS    R14,R14,#8
                STMGEIA R0!,{R4,R5}
                BGT     clear_x_8lp
                ADDLT   R14,R14,#8
clear_x_4lp     SUBS    R14,R14,#4
                STRGE   R4,[R0],#4
                BGT     clear_x_4lp
                ADDLTS  R14,R14,#4
                BGT     clear_tail
clear_next      ADD     R0,R0,R6
                SUBS    R3,R3,#1
                BGT     clear_y_lp
                LDMFD   R13!,{R0-R11,PC}

clear_head_lp   STRB    R4,[R0],#1
                SUBS    R14,R14,#1
                TSTNE   R0,#3
                BNE     clear_head_lp
                CMP     R14,#0
                BNE     clear_x_64lp
                B       clear_next
clear_tail
clear_x_1lp     STRB    R4,[R0],#1
                SUBS    R14,R14,#1
                BGT     clear_x_1lp
                ADD     R0,R0,R6        ;next line
                SUBS    R3,R3,#1
                BGT     clear_y_lp
                LDMFD   R13!,{R0-R11,PC}


;-------------------------------------------------------------------------------------
;
;       Text output
;
;-------------------------------------------------------------------------------------
;
; entry R0 = x co-ord
;       R1 = y co-ord
;       R2 = pointer to NUL-terminated text
; exit  R2 -> terminator

output_text_at  STMFD   R13!,{R0,R1,R14}
                BL      output_move
out_text_at_lp  MOV     R0,R2
                BL      string_len
                BL      output_ntext
                LDRB    R0,[R1,R0]!
                MOV     R2,R1
                TEQ     R0,#0
                LDMEQFD R13!,{R0,R1,PC}
                ADR     R14,out_text_at_lp
                ADD     R2,R2,#1
                B       output_char


; entry R0 = x co-ord
;       R1 = y co-ord
;       R2 -> text
;       R3 = length of text (no terminator)

output_ntext_at STMFD   R13!,{R0,R1,R14}
                BL      output_move
                MOV     R0,R2
                MOV     R1,R3
                BL      output_ntext
                LDMFD   R13!,{R0,R1,PC}


; entry R0 = x co-ord
;       R1 = y co-ord

output_move     STMFD   R13!,{R0-R2,R14}
                LDR     R2,Columns
                LDR     R14,Rows
                CMP     R0,R2
                SUBHS   R0,R2,#1
                CMP     R1,R14
                SUBHS   R1,R14,#1
                STR     R0,OutputX
                STR     R1,OutputY
                LDMFD   R13!,{R0-R2,PC}


; entry R0 = pointer to NUL-terminated text
; exit  R0 -> terminator

output_text     STMFD   R13!,{R1,R2,R14}
out_text_lp     BL      string_len
                BL      output_ntext
                LDRB    R0,[R1,R0]!
                TEQ     R0,#0
                MOVEQ   R0,R1
                LDMEQFD R13!,{R1,R2,PC}
                BL      output_char
                ADD     R0,R1,#1
                B       out_text_lp


; entry R0 = x co-ord
;       R1 = y co-ord
;       R2 = character

output_char_at  STMFD   R13!,{R0-R2,R14}
                BL      output_move
                MOV     R0,R2
                BL      output_char
                LDMFD   R13!,{R0-R2,PC}


; entry R0 = character

output_char     STMFD   R13!,{R0,R1,R14}
                TEQ     R0,#10
                BEQ     out_char_nl
                TEQ     R0,#13
                BEQ     out_char_cr
                MOV     R0,R13
                MOV     R1,#1
                BL      output_ntext
                LDMFD   R13!,{R0,R1,PC}
out_char_nl     LDR     R1,OutputY
                LDR     R14,Rows
                ADD     R1,R1,#1
                CMP     R1,R14
                STRLO   R1,OutputY
                LDMLOFD R13!,{R0,R1,PC}
                STMFD   R13!,{R2-R4}
                LDR     R2,Columns
                SUB     R3,R14,#1
                MOV     R0,#0
                MOV     R1,#1
                MOV     R4,#1
                BL      copy_block_up
                MOV     R1,R3
                ADD     R3,R3,#1
                BL      clear_block
                LDMFD   R13!,{R2-R4}
                LDMFD   R13!,{R0,R1,PC}

out_char_cr     MOV     R0,#0
                STR     R0,OutputX
                LDMFD   R13!,{R0,R1,PC}


; Output an unterminated string, exploiting the burst transfer
; mode of the ARM610 by rendering the first scanline of multiple
; adjacent chars before considering the second scanline.
;
; (For ARM610 this is approx. 3 times faster than rendering
;  individual chars. For SA the difference is small because
;  burst transfers are not performed to the uncacheable screen.)
;
; entry R0 -> text string (unterminated)
;       R1 =  length of string

output_ntext    STMFD   R13!,{R0-R12,R14}
                LDR     R6,Columns

                ;calculate start address of first character

                ADR     R14,OutputX
                LDMIA   R14,{R2-R5}

                ;R2 = OutputX
                ;R3 = OutputY
                ;R4 = BytesPerRow
                ;R5 = BytesPerChar

                ;update cursor position

                SUB     R6,R6,R2        ;number of columns remaining
                CMP     R1,R6           ; on this line
                MOVHSS  R1,R6
                CMPNE   R1,#0
                LDMEQFD R13!,{R0-R12,PC} ;nowt to do

                ADD     R6,R1,R2
                LDR     R14,ScreenBase
                STR     R6,OutputX
                MLA     R14,R3,R4,R14
                MOV     R11,R4,LSR #3   ;offset between scanlines
                MLA     R10,R5,R2,R14
                SUB     R2,R4,R4,LSR #3
                SUB     R2,R2,#16       ;4 word transfer

                ;R2  = offset from last scanline to first in next
                ;      block of characters.
                ;R4  = bytes per text row (8 scanlines)
                ;R10 = address of top-left of first char
                ;R11 = offset between adjacent scanlines

                LDR     R12,InvertFont
                ADR     R9,PixelTable
                CMP     R5,#8
                BEQ     out8
                BHI     out16
                CMP     R5,#2
                BEQ     out2
                BHI     out4

; -------------------------- 1bpp -------------------------

out1            ;align to word boundary
                ; (output 0-3 chars, not exceeding string length)

                ANDS    R14,R10,#3
                BEQ     out1_aligned
                ADR     R8,font - 32*8
                RSB     R14,R14,#4      ;head width in chars

                SUBS    R1,R1,R14       ;truncate to string length
                ADDLO   R14,R1,R14
                MOVLO   R1,#0

                MOV     R3,#8
out1_prelp2     LDRB    R5,[R0],#1
                MOV     R7,R14
out1_prelp      LDRB    R5,[R8,R5,LSL #3]
                SUBS    R7,R7,#1
                EOR     R5,R5,R12
                STRB    R5,[R10],#1
                LDRGTB  R5,[R0],#1
                BGT     out1_prelp

                SUBS    R3,R3,#1        ;next scanline
                ADD     R10,R10,R4,LSR #3
                SUBGT   R0,R0,R14       ;rewind to text start
                ADDGT   R8,R8,#1
                SUBGT   R10,R10,R14
                BGT     out1_prelp2
                SUB     R10,R10,R4
                B       out1_aligned

out1_16wlp      CMP     R3,#2           ;move previous word to
                MOVHI   R4,R7           ; correct register
                MOVEQ   R5,R7
                MOVLO   R6,R7
                SUB     R14,R14,#1<<30

out1_16lp       LDRB    R3,[R0],#1
                LDRB    R7,[R0],#1
                SUBS    R3,R3,#32
                LDRPLB  R3,[R8,R3,LSL #3]
                MOVMI   R3,#0
                SUBS    R7,R7,#32
                LDRPLB  R7,[R8,R7,LSL #3]
                MOVMI   R7,#0
                LDRB    R9,[R0],#1
                ORR     R7,R3,R7,LSL #8
                LDRB    R3,[R0],#1
                SUBS    R9,R9,#32
                LDRPLB  R9,[R8,R9,LSL #3]
                MOVMI   R9,#0
                SUBS    R3,R3,#32
                LDRPLB  R3,[R8,R3,LSL #3]
                MOVMI   R3,#0
                ORR     R7,R7,R9,LSL #16
                ORR     R7,R7,R3,LSL #24
                EOR     R7,R7,R12       ;handle inverse text
                MOVS    R3,R14,LSR #30
                BNE     out1_16wlp

                ADD     R8,R8,#1        ;next row in font data
                STMIA   R10,{R4-R7}
                SUBS    R14,R14,#1
                SUBGT   R0,R0,#16       ;rewind in text string
                ADDGT   R10,R10,R11
                ORRGT   R14,R14,#3<<30  ;word counter
                BGT     out1_16lp
                SUB     R10,R10,R2
out1_aligned
out1_16test     SUBS    R1,R1,#16       ;>=16 chars left?
                MOVPL   R14,#&C0000008  ;counter (rows + words)
                ADRPL   R8,font
                BPL     out1_16lp
                ADD     R1,R1,#16
                ADD     R2,R2,#15       ;progress one byte
                ADD     R2,R2,R11       ; each iteration now and compensate
                                        ; for postindexing
out1_1test      ADR     R8,font
                SUBS    R1,R1,#1
                LDRPLB  R4,[R0],#1
                LDMMIFD R13!,{R0-R12,PC}
                SUBS    R4,R4,#32
                LDRPLB  R4,[R8,R4,LSL #3]!
                MOVMI   R4,#0
                MOV     R6,#4           ;2 scanlines per iter
out1_1lp        EOR     R4,R4,R12
                STRB    R4,[R10],R11
                LDRB    R4,[R8,#1]!
                SUBS    R6,R6,#1
                EOR     R4,R4,R12
                STRB    R4,[R10],R11
                LDRGTB  R4,[R8,#1]!
                BGT     out1_1lp
                SUB     R10,R10,R2
                B       out1_1test


; -------------------------- 2bpp -------------------------

out2            ;align to word boundary
                ; (only 0 or 1 char - cannot exceed string length)

                TST     R10,#3
                BEQ     out2_aligned
                ADR     R8,font - 32*8
                LDRB    R5,[R0],#1
                MOV     R3,#8
                LDRB    R6,[R8,R5,LSL #3]!
                SUB     R1,R1,#1        ;adjust string length

out2_prelp      EOR     R6,R6,R12
                LDR     R5,[R9,R6,LSL #2]
                SUBS    R3,R3,#1
                MOV     R6,R5,LSR #8
                STRB    R5,[R10]        ;hword store
                STRB    R6,[R10,#1]
                LDRGTB  R6,[R8,#1]!
                ADD     R10,R10,R4,LSR #3
                BGT     out2_prelp
                SUB     R10,R10,R4
                ADD     R10,R10,#2
                B       out2_aligned

out2_mask       DCD     &20202020

out2_8read      STMFD   R13!,{R1,R2}
                ANDS    R5,R0,#3        ;read two words from a
                LDR     R2,[R0,-R5]!    ; possibly unaligned address
                LDR     R3,[R0,#4]!
                LDRNE   R4,[R0,#4]!
                MOVNE   R6,R5,LSL #3
                ADDNE   R0,R0,R5        ;points beyond the 8 chars read
                MOVNE   R2,R2,LSR R6
                RSBNE   R7,R6,#32
                ADDEQ   R0,R0,#4
                ORRNE   R2,R2,R3,LSL R7
                MOVNE   R3,R3,LSR R6
                ORRNE   R3,R3,R4,LSL R7

                ;for each char packed into the two words in R2,R3
                ; perform the logical OR of bits 5-7, thus testing
                ; whether the char >= 32. If so, then subtract 32
                ; from this byte. (We can't subtract from 0-31 without
                ; affecting the next char, the char displayed for 0-31
                ; is unimportant.)

                LDR     R6,out2_mask
                ORR     R4,R2,R2,LSR #1
                ORR     R5,R3,R3,LSR #1
                ORR     R4,R4,R2,LSR #2
                ORR     R5,R5,R3,LSR #2
                AND     R4,R4,R6
                AND     R5,R5,R6
                SUB     R2,R2,R4        ;each byte is now a valid index
                SUB     R3,R3,R5        ; into the font data
                ADR     R8,font
                MOV     R14,#8

out2_8lp        AND     R5,R2,#&FF00
                AND     R4,R2,#&FF
                LDRB    R5,[R8,R5,LSR #5]
                LDRB    R4,[R8,R4,LSL #3]
                LDR     R5,[R9,R5,LSL #2]
                LDR     R4,[R9,R4,LSL #2]
                AND     R6,R2,#&FF000000
                ORR     R4,R4,R5,LSL #16

                AND     R5,R2,#&FF0000
                LDRB    R6,[R8,R6,LSR #21]
                LDRB    R5,[R8,R5,LSR #13]
                EOR     R4,R4,R12
                LDR     R6,[R9,R6,LSL #2]
                LDR     R5,[R9,R5,LSL #2]
                AND     R7,R3,#&FF00
                ORR     R5,R5,R6,LSL #16

                AND     R6,R3,#&FF
                LDRB    R7,[R8,R7,LSR #5]
                LDRB    R6,[R8,R6,LSL #3]
                EOR     R5,R5,R12
                LDR     R7,[R9,R7,LSL #2]
                LDR     R6,[R9,R6,LSL #2]
                AND     R1,R3,#&FF000000
                ORR     R6,R6,R7,LSL #16

                AND     R7,R3,#&FF0000
                LDRB    R1,[R8,R1,LSR #21]
                LDRB    R7,[R8,R7,LSR #13]
                EOR     R6,R6,R12
                LDR     R1,[R9,R1,LSL #2]
                LDR     R7,[R9,R7,LSL #2]
                ADD     R8,R8,#1        ;next row in font data
                ORR     R7,R7,R1,LSL #16

                EOR     R7,R7,R12
                STMIA   R10,{R4-R7}
                SUBS    R14,R14,#1
                ADDGT   R10,R10,R11
                BGT     out2_8lp
                LDMFD   R13!,{R1,R2}
                SUB     R10,R10,R2
out2_aligned
out2_8test      SUBS    R1,R1,#8        ;>=8 chars left?
                BPL     out2_8read
                ADD     R2,R2,R11
                ADD     R1,R1,#8        ;move only one char right
                ADD     R2,R2,#14       ; each iteration now and compensate
                SUB     R11,R11,#1      ; for postindexing
out2_1test      ADR     R8,font
                SUBS    R1,R1,#1
                LDRPLB  R4,[R0],#1
                LDMMIFD R13!,{R0-R12,PC}
                SUBS    R4,R4,#32
                LDRPLB  R4,[R8,R4,LSL #3]!
                MOVMI   R4,#0
                MOV     R6,#8
out2_1lp        EOR     R4,R4,R12
                LDR     R4,[R9,R4,LSL #2]
                SUBS    R6,R6,#1
                MOV     R5,R4,LSR #8
                STRB    R4,[R10],#1     ;perform hword store as
                STRB    R5,[R10],R11    ; 2 bytes
                LDRGTB  R4,[R8,#1]!
                BGT     out2_1lp
                SUB     R10,R10,R2
                B       out2_1test

; -------------------------- 4bpp -------------------------


out4_4read      LDRB    R4,[R0],#1
                LDRB    R5,[R0],#1
                LDRB    R6,[R0],#1
                LDRB    R7,[R0],#1

                STMFD   R13!,{R0-R2}
                SUBS    R0,R4,#32
                MOVMI   R0,#0
                SUBS    R1,R5,#32
                MOVMI   R1,#0
                SUBS    R2,R6,#32
                MOVMI   R2,#0
                SUBS    R3,R7,#32
                MOVMI   R3,#0
                ADR     R8,font
                MOV     R14,#8

out4_4lp        LDRB    R4,[R8,R0,LSL #3]
                LDRB    R5,[R8,R1,LSL #3]
                LDRB    R6,[R8,R2,LSL #3]
                LDRB    R7,[R8,R3,LSL #3]
                EOR     R4,R4,R12         ;handle inverse text
                EOR     R5,R5,R12
                EOR     R6,R6,R12
                EOR     R7,R7,R12
                LDR     R4,[R9,R4,LSL #2]
                LDR     R5,[R9,R5,LSL #2]
                LDR     R6,[R9,R6,LSL #2]
                LDR     R7,[R9,R7,LSL #2]
                ADD     R8,R8,#1        ;next row in font data
                STMIA   R10,{R4-R7}
                SUBS    R14,R14,#1
                ADDGT   R10,R10,R11
                BGT     out4_4lp
                LDMFD   R13!,{R0-R2}
                SUB     R10,R10,R2
out4
out4_4test      SUBS    R1,R1,#4        ;>=4 chars left?
                BPL     out4_4read
                ADD     R1,R1,#4
                ADD     R2,R2,#12       ;move only one char right
                ADD     R2,R2,R11       ; each iteration now and compensate
                                        ; for postindexing
out4_1test      ADR     R8,font
                SUBS    R1,R1,#1
                LDRPLB  R4,[R0],#1
                LDMMIFD R13!,{R0-R12,PC}
                SUBS    R4,R4,#32
                LDRPLB  R4,[R8,R4,LSL #3]!
                MOVMI   R4,#0
                MOV     R6,#8
out4_1lp        EOR     R4,R4,R12
                LDR     R4,[R9,R4,LSL #2]
                SUBS    R6,R6,#1
                STR     R4,[R10],R11
                LDRGTB  R4,[R8,#1]!
                BGT     out4_1lp
                SUB     R10,R10,R2
                B       out4_1test


; Table of character bitmaps
; First char is code 32
;
; Each char consists of 8 bytes, with the
; MSB representing the right-most pixel.
; (ie. image is reversed)

font            %       8

                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_00110110
                DCB     2_00110110
                DCB     2_00110110
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00110110
                DCB     2_00110110
                DCB     2_01111111
                DCB     2_00110110
                DCB     2_01111111
                DCB     2_00110110
                DCB     2_00110110
                DCB     2_00000000

                DCB     2_00001000
                DCB     2_01111110
                DCB     2_00001011
                DCB     2_00111110
                DCB     2_01101000
                DCB     2_00111111
                DCB     2_00001000
                DCB     2_00000000

                DCB     2_11000011
                DCB     2_01100011
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_11000110
                DCB     2_11000011
                DCB     2_00000000

                DCB     2_00001110
                DCB     2_00011011
                DCB     2_00011011
                DCB     2_00001110
                DCB     2_01011011
                DCB     2_00110011
                DCB     2_01101110
                DCB     2_00000000

                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00011000
                DCB     2_00110000
                DCB     2_00000000

                DCB     2_00001100
                DCB     2_00011000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00011000
                DCB     2_01111110
                DCB     2_00111100
                DCB     2_01111110
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_01111110
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00011000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01111110
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_01100000
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00000110
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01110110
                DCB     2_01111110
                DCB     2_01101110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00011000
                DCB     2_00011100
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100000
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100000
                DCB     2_00111000
                DCB     2_01100000
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00110000
                DCB     2_00111000
                DCB     2_00111100
                DCB     2_00110110
                DCB     2_01111110
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_00000110
                DCB     2_00111110
                DCB     2_01100000
                DCB     2_01100000
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00111000
                DCB     2_00001100
                DCB     2_00000110
                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_01100000
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111100
                DCB     2_01100000
                DCB     2_00110000
                DCB     2_00011100
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00001100

                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00000110
                DCB     2_00001100
                DCB     2_00011000
                DCB     2_00110000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01111110
                DCB     2_00000000
                DCB     2_01111110
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00001100
                DCB     2_00011000
                DCB     2_00110000
                DCB     2_01100000
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01110110
                DCB     2_01101110
                DCB     2_01110110
                DCB     2_00000110
                DCB     2_01111100
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111110
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00011110
                DCB     2_00110110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00110110
                DCB     2_00011110
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00011110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00011110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_00000110
                DCB     2_01110110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00110110
                DCB     2_00011100
                DCB     2_00000000

                DCB     2_01100110
                DCB     2_00110110
                DCB     2_00011110
                DCB     2_00001110
                DCB     2_00011110
                DCB     2_00110110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_01100011
                DCB     2_01110111
                DCB     2_01111111
                DCB     2_01101011
                DCB     2_01101011
                DCB     2_01100011
                DCB     2_01100011
                DCB     2_00000000

                DCB     2_01100110
                DCB     2_01101110
                DCB     2_01101110
                DCB     2_01111110
                DCB     2_01110110
                DCB     2_01110110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01010110
                DCB     2_00110110
                DCB     2_01101100
                DCB     2_00000000

                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111110
                DCB     2_00110110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00111100
                DCB     2_01100110
                DCB     2_00000110
                DCB     2_00111100
                DCB     2_01100000
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_01100011
                DCB     2_01100011
                DCB     2_01101011
                DCB     2_01101011
                DCB     2_01111111
                DCB     2_01110111
                DCB     2_01100011
                DCB     2_00000000

                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00011000
                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_01100000
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00000110
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000110
                DCB     2_00001100
                DCB     2_00011000
                DCB     2_00110000
                DCB     2_01100000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_01111110
                DCB     2_01100000
                DCB     2_01100000
                DCB     2_01100000
                DCB     2_01100000
                DCB     2_01100000
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_00011000
                DCB     2_00111100
                DCB     2_01100110
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_11111111

                DCB     2_00001100
                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00111100
                DCB     2_01100000
                DCB     2_01111100
                DCB     2_01100110
                DCB     2_01111100
                DCB     2_00000000

                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111110
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00111100
                DCB     2_01100110
                DCB     2_00000110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_01100000
                DCB     2_01100000
                DCB     2_01111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111100
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01111110
                DCB     2_00000110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00111000
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00111110
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111100
                DCB     2_01100000
                DCB     2_00111110

                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00011000
                DCB     2_00000000
                DCB     2_00011100
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00110000
                DCB     2_00000000
                DCB     2_00111000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00110000
                DCB     2_00011100

                DCB     2_00000110
                DCB     2_00000110
                DCB     2_01100110
                DCB     2_00110110
                DCB     2_00011110
                DCB     2_00110110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00011100
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00110110
                DCB     2_01111111
                DCB     2_01101011
                DCB     2_01101011
                DCB     2_01100011
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00111110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111110
                DCB     2_00000110
                DCB     2_00000110

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01111100
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111100
                DCB     2_01100000
                DCB     2_11100000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00110110
                DCB     2_01101110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000110
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01111100
                DCB     2_00000110
                DCB     2_00111100
                DCB     2_01100000
                DCB     2_00111110
                DCB     2_00000000

                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00111110
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00001100
                DCB     2_00111000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111100
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01100011
                DCB     2_01101011
                DCB     2_01101011
                DCB     2_01111111
                DCB     2_00110110
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01100110
                DCB     2_00111100
                DCB     2_00011000
                DCB     2_00111100
                DCB     2_01100110
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01100110
                DCB     2_01111100
                DCB     2_01100000
                DCB     2_00111100

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_01111110
                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_01111110
                DCB     2_00000000

                DCB     2_00110000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00001110
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00110000
                DCB     2_00000000

                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00000000

                DCB     2_00001100
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_01110000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00001100
                DCB     2_00000000

                DCB     2_01000110
                DCB     2_01101011
                DCB     2_00110001
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_11111111
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000

                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_11111111
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_11111111
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000

                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011111
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000
                DCB     2_00011000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00001000
                DCB     2_00000000

                DCB     2_01010101
                DCB     2_10101010
                DCB     2_01010101
                DCB     2_10101010
                DCB     2_01010101
                DCB     2_10101010
                DCB     2_01010101
                DCB     2_10101010

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000
                DCB     2_00000000

; -------------------------- 8bpp -------------------------


out8_2read      LDRB    R4,[R0],#1
                LDRB    R5,[R0],#1

                STMFD   R13!,{R0-R2}
                SUBS    R0,R4,#32
                MOVMI   R0,#0
                SUBS    R1,R5,#32
                MOVMI   R1,#0
                ADR     R8,font
                MOV     R14,#8

out8_2lp        LDRB    R4,[R8,R0,LSL #3]
                LDRB    R6,[R8,R1,LSL #3]
                EOR     R4,R4,R12
                EOR     R6,R6,R12
                AND     R5,R4,#&F0
                AND     R4,R4,#&0F
                AND     R7,R6,#&F0
                AND     R6,R6,#&0F
                LDR     R4,[R9,R4,LSL #2]
                LDR     R5,[R9,R5,LSR #2]
                LDR     R6,[R9,R6,LSL #2]
                LDR     R7,[R9,R7,LSR #2]
                ADD     R8,R8,#1
                STMIA   R10,{R4-R7}
                SUBS    R14,R14,#1
                ADDGT   R10,R10,R11
                BGT     out8_2lp
                LDMFD   R13!,{R0-R2}
                SUB     R10,R10,R2
out8
out8_2test      SUBS    R1,R1,#2        ;>=2 chars left?
                BPL     out8_2read
                ADD     R2,R2,R11
                ADD     R1,R1,#2
                SUB     R11,R11,#4      ;allow for +4 postindexing
                ADD     R2,R2,#8        ;move 2 words right each time now

out8_1test      ADR     R8,font
                SUBS    R1,R1,#1
                LDRPLB  R4,[R0],#1
                LDMMIFD R13!,{R0-R12,PC}
                SUBS    R4,R4,#32
                LDRPLB  R4,[R8,R4,LSL #3]!
                MOVMI   R4,#0
                MOV     R6,#8
out8_1lp        EOR     R4,R4,R12
                AND     R5,R4,#&F0
                AND     R4,R4,#&0F
                LDR     R5,[R9,R5,LSR #2]
                LDR     R4,[R9,R4,LSL #2]
                SUBS    R6,R6,#1
                STR     R4,[R10],#4
                STR     R5,[R10],R11
                LDRGTB  R4,[R8,#1]!
                BGT     out8_1lp
                SUB     R10,R10,R2
                B       out8_1test

; ------------------------- 16bpp -------------------------


out16           CMP     R5,#32
                BEQ     out32

out16_1read     LDRB    R4,[R0],#1
                ADRL    R8,font
                SUBS    R4,R4,#32
                MOV     R14,#8
                LDRPLB  R4,[R8,R4,LSL #3]!
                MOVMI   R4,#0

out16_1lp       EOR     R4,R4,R12
                AND     R5,R4,#&F
                AND     R6,R4,#&F0
                ADD     R5,R9,R5,LSL #3
                ADD     R6,R9,R6,LSR #1
                LDMIA   R5,{R4,R5}
                LDMIA   R6,{R6,R7}
                SUBS    R14,R14,#1
                STMIA   R10,{R4-R7}
                LDRGTB  R4,[R8,#1]!
                ADDGT   R10,R10,R11
                BGT     out16_1lp
                SUB     R10,R10,R2

                SUBS    R1,R1,#1
                BGT     out16_1read
                LDMFD   R13!,{R0-R12,PC}


; ------------------------- 32bpp -------------------------


out32           SUB     R2,R2,#16       ;we output 8 word
out32_1read     LDRB    R4,[R0],#1      ; columns, not 4
                ADRL    R8,font
                SUBS    R4,R4,#32
                MOV     R14,#8
                LDRPLB  R4,[R8,R4,LSL #3]!
                MOVMI   R4,#0
                STMFD   R13!,{R0-R2}

out32_1lp       EOR     R4,R4,R12
                AND     R5,R4,#&F
                AND     R6,R4,#&F0
                ADD     R5,R9,R5,LSL #4
                ADD     R6,R9,R6
                LDMIA   R5,{R0-R3}
                LDMIA   R6,{R4-R7}
                SUBS    R14,R14,#1
                STMIA   R10,{R0-R7}
                LDRGTB  R4,[R8,#1]!
                ADDGT   R10,R10,R11
                BGT     out32_1lp
                LDMFD   R13!,{R0-R2}
                SUB     R10,R10,R2

                SUBS    R1,R1,#1
                BGT     out32_1read
                LDMFD   R13!,{R0-R12,PC}


;-------------------------------------------------------------------------------------
;
;       Pixel table and text colours
;
;-------------------------------------------------------------------------------------
;
; Initialise the pixel table using the current screen
; parameters
;
; entry R0 = foreground pixel value
;       R1 = background pixel value
;       R8 = bit depth/bytes per character
; exit  R0-R8,R10-R12 corrupted

init_pixtab     ;calculate replicated pixel words used to
                ; clear/invert areas of screen image

                EOR     R2,R0,R1
                MOV     R4,#0
                MOV     R5,#0
                MOV     R10,#0
                MOV     R12,#32

init_repl_lp    ORR     R4,R2,R4,LSL R8   ;build InvertPixel
                ORR     R5,R1,R5,LSL R8   ;build BTextPixRepl
                ORR     R10,R0,R10,LSL R8 ;build FTextPixRepl
                SUBS    R12,R12,R8
                BGT     init_repl_lp

                CMP     R8,#2
                MOVHI   R4,#255           ;font data inverted, not image data
                STR     R10,FTextPixRepl
                STR     R5,BTextPixRepl
                STR     R4,InvertPixel

                ADR     R2,PixelTable
                MOVLO   PC,R14          ;no table reqd

                ;determine number of entries required

                CMP     R8,#4
                MOVHI   R10,#16         ;nibble index
                MOVLS   R10,#256        ;byte index
                MOV     R3,#0

init_entry_lp   MOV     R11,R10,LSR #1  ;first bit to be tested
                MOV     R12,#0
init_word_lp    MOV     R4,#0
init_pix_lp     TST     R3,R11
                ORRNE   R4,R0,R4,LSL R8
                ORREQ   R4,R1,R4,LSL R8
                MOVS    R11,R11,LSR #1
                ADDCC   R12,R12,R8
                BCS     init_next
                TST     R12,#31         ;need a new word?
                BNE     init_pix_lp

                CMP     R12,#64         ;32bpp fills R7-R4 in turn
                MOVLO   R7,R4           ;16bpp fills R7,R4
                MOVEQ   R6,R4
                MOVHI   R5,R4
                B       init_word_lp

init_next       CMP     R8,#16
                ADD     R3,R3,#1
                STRLO   R4,[R2],#4      ;store array entry
                STMEQIA R2!,{R4,R7}
                STMHIIA R2!,{R4-R7}

                CMP     R3,R10          ;all entries done?
                BLO     init_entry_lp
                MOV     PC,R14


; Set the text foreground and background colours,
; returning the previous colours
;
; entry R0 = foreground pixel value
;       R1 = background pixel value
; exit  R0 = previous foreground
;       R1 = prev bground

set_text_colours
                STMFD   R13!,{R2-R11,R14}
                LDR     R2,FTextPixel
                LDR     R3,BTextPixel
                STR     R0,FTextPixel
                STR     R1,BTextPixel
                STMFD   R13!,{R2,R3}
                LDR     R8,BitsPerPixel
                BL      init_pixtab

                ;set InvertFont = 0 to indicate no inversion
                ; (unless 1bpp and foreground pixel value = 0; because
                ;  the font data is stored using 1 for foreground.)

                LDR     R1,BitsPerPixel
                LDR     R2,FTextPixel
                MOV     R0,#0
                CMP     R1,#1
                SUBEQ   R0,R2,#1        ;known value (0 or -1)
                STR     R0,InvertFont
                LDMFD   R13!,{R0-R11,PC}


;; Exchange the foreground and background text colours
;; without regenerating the pixel table
;;
;; exit R1,R2 corrupted
;
;exchange_colours
;               LDR     R1,FTextPixel]
;               LDR     R2,BTextPixel]
;               STR     R1,BTextPixel]
;               STR     R2,FTextPixel]
;
;               LDR     R1,FTextPixRepl]
;               LDR     R2,BTextPixRepl]
;               STR     R1,BTextPixRepl]
;               STR     R2,FTextPixRepl]
;
;               ; InvertFont is used to invert either
;               ; font bitmap data or pixel data, depending
;               ; upon the bit depth:
;               ;       1bpp   - invert pixel data (-1)
;               ;                Note: inversion depends upon palette
;               ;       2bpp   - invert pixel data (X)
;               ;       >=4bpp - invert font data  (255)
;               ;
;               ; The value of InvertFont reqd for inversion is stored
;               ; in InvertPixel
;
;               LDR     R2,InvertPixel]
;               LDR     R1,InvertFont]
;               SUBS    R1,R1,R2
;               MOVNE   R1,R2
;               STR     R1,InvertFont]
;               MOV     PC,R14

; return length of ctrl-char terminated string
string_len      STR     R14,[R13,#-4]!
                LDRB    R14,[R0]
                MOV     R1,R0
str_len_lp      CMP     R14,#32
                LDRHSB  R14,[R1,#1]!
                BHS     str_len_lp
                SUB     R1,R1,R0
                LDR     PC,[R13],#4


output_hex8     STMFD   R13!,{R0,R1,R14}
                SUB     R13,R13,#8
                MOV     R1,R13
out_hex8_lp     MOV     R14,R0,LSR #28
                CMP     R14,#10
                ADDHS   R14,R14,#'A'-10
                ADDLO   R14,R14,#'0'
                MOV     R0,R0,LSL #4
                STRB    R14,[R1],#1
                SUB     R14,R1,R13
                CMP     R14,#8
                BLO     out_hex8_lp
                MOV     R0,R13
                MOV     R1,#8
                BL      output_ntext
                ADD     R13,R13,#8
                LDMFD   R13!,{R0,R1,PC}

output_newline  STMFD   R13!,{R0,R1,R14}
                MOV     R0,#0
                LDR     R1,OutputY
                STR     R0,OutputX
                LDR     R14,Rows
                ADD     R1,R1,#1
                CMP     R1,R14
                STRLO   R1,OutputY
                LDMLOFD R13!,{R0,R1,PC}
                STMFD   R13!,{R2-R4}
                LDR     R2,Columns
                SUB     R3,R14,#1
                MOV     R0,#0
                MOV     R1,#1
                MOV     R4,#1
                BL      copy_block_up
                MOV     R1,R3
                ADD     R3,R3,#1
                BL      clear_block
                LDMFD   R13!,{R2-R4}
                LDMFD   R13!,{R0,R1,PC}

output_regs     STR     R14,[R13,#-4]!
                ADD     R14,R13,#4
                STMFD   R13!,{R0-R12,R14}
                MOV     R5,#15
                MOV     R6,R13
                ADR     R4,reg_names
out_reg_lp      MOV     R0,R4
                ADD     R4,R4,#4
                BL      output_text
                LDR     R0,[R6],#4
                BL      output_hex8
                BL      output_newline
                SUBS    R5,R5,#1
                BHI     out_reg_lp
                LDMFD   R13!,{R0-R12}
                ADD     R13,R13,#4
                LDR     PC,[R13],#4

reg_names       =       "a1:",0
                =       "a2:",0
                =       "a3:",0
                =       "a4:",0
                =       "v1:",0
                =       "v2:",0
                =       "v3:",0
                =       "v4:",0
                =       "v5:",0
                =       "v6:",0
                =       "v7:",0
                =       "v8:",0
                =       "ip:",0
                =       "sp:",0
                =       "lr:",0
                ALIGN
        ]

                END
